from flask import Flask, render_template_string
import win32com.client
import pythoncom
from bs4 import BeautifulSoup

app = Flask(__name__)

# Template to display only tabular data, with proper styling and alignment
email_template = '''
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tabular Data</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f9;
        }
        .container {
            width: 90%;
            margin: 20px auto;
            padding: 20px;
            background-color: #fff;
            box-shadow: 0 0 10px rgba(0,0,0,0.1);
        }
        .email-body {
            border: 1px solid #ddd;
            padding: 20px;
            margin-top: 10px;
            background-color: #fafafa;
            overflow: hidden;
        }
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }
        table th, table td {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: center;
            vertical-align: middle;
        }
        table th {
            background-color: #333;
            color: white;
        }
        /* Ensure equal alignment of cell borders */
        table {
            table-layout: auto;
            width: 100%;
        }
        /* Handle overflowing content */
        table td {
            word-wrap: break-word;
        }
        /* Make sure each table row takes up space as needed */
        table tr {
            height: auto;
        }
        /* Adjustments for the table's borders to align perfectly */
        table {
            border-spacing: 0;
            border: 1px solid #ddd;
        }
        /* Add space between rows */
        table tr + tr {
            margin-top: 15px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="email-body">
            {{ email.body | safe }}
        </div>
        <a href="/">Back to email list</a>
    </div>
</body>
</html>
'''

# Function to fetch health status emails from Outlook
def fetch_health_status_emails():
    pythoncom.CoInitialize()
    outlook = win32com.client.Dispatch("Outlook.Application").GetNamespace("MAPI")
    inbox = outlook.GetDefaultFolder(6)  # Access Inbox
    messages = inbox.Items
    messages.Sort("[ReceivedTime]", True)  # Sort by received time

    emails = []
    for message in messages:
        if message.Class == 43 and 'UK DPaaS Platform Health Status' in message.Subject:
            email_data = {
                'subject': message.Subject,
                'received_time': message.ReceivedTime.strftime('%Y-%m-%d %H:%M:%S'),
                'body': extract_table_from_email(message.HTMLBody if message.BodyFormat == 2 else message.Body)
            }
            emails.append(email_data)
    pythoncom.CoUninitialize()
    return emails

# Extract the tables from the email body content
def extract_table_from_email(body):
    soup = BeautifulSoup(body, 'html.parser')

    # Extract only valid table elements
    tables = soup.find_all('table')
    valid_tables = []
    for table in tables:
        # Filter out empty tables or tables that don't have useful content
        if table.find('tr') and len(table.find_all('td')) > 0:
            valid_tables.append(table)

    if valid_tables:
        # Convert all valid tables to HTML and concatenate them
        extracted_tables = ''.join([str(table) for table in valid_tables])
        return extracted_tables
    else:
        return "No table data found."

# Route to display the email list
@app.route('/')
def list_emails():
    emails = fetch_health_status_emails()
    return render_template_string('''
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Email List</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                margin: 0;
                padding: 0;
                background-color: #f4f4f9;
            }
            .container {
                width: 90%;
                margin: 20px auto;
                padding: 20px;
                background-color: #fff;
                box-shadow: 0 0 10px rgba(0,0,0,0.1);
            }
            ul {
                list-style-type: none;
                padding: 0;
            }
            ul li {
                margin-bottom: 10px;
            }
            a {
                text-decoration: none;
                padding: 10px 15px;
                background-color: #007bff;
                color: white;
                border-radius: 5px;
            }
            a:hover {
                background-color: #0056b3;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>UK DPaaS Platform Health Status - Emails</h1>
            <ul>
                {% for email in emails %}
                <li><a href="/email/{{ loop.index0 }}">{{ email.received_time }}</a></li>
                {% endfor %}
            </ul>
        </div>
    </body>
    </html>
    ''', emails=emails)

# Route to display individual email
@app.route('/email/<int:email_id>')
def show_email(email_id):
    emails = fetch_health_status_emails()
    if email_id < len(emails):
        email = emails[email_id]
        return render_template_string(email_template, email=email)
    else:
        return "Email not found", 404

if __name__ == '__main__':
    app.run(debug=True)
