from flask import Flask, render_template_string
import win32com.client
import pythoncom
import datetime

app = Flask(__name__)

def fetch_health_status_emails():
    # Initialize COM
    pythoncom.CoInitialize()

    try:
        outlook = win32com.client.Dispatch("Outlook.Application").GetNamespace("MAPI")
        inbox = outlook.GetDefaultFolder(6)  # 6 refers to the inbox
        messages = inbox.Items
        messages = messages.Restrict("[Subject] LIKE 'UK DPaaS Platform Health Status%'")

        emails = []

        for message in messages:
            emails.append({
                'received_time': message.ReceivedTime.strftime('%Y-%m-%d %H:%M:%S'),
                'subject': message.Subject,
                'body': message.Body,  # Get the email body
                'html_body': message.HTMLBody  # Get the email body in HTML format
            })

        return emails

    finally:
        # Uninitialize COM
        pythoncom.CoUninitialize()

# HTML template to list emails
template_list = '''
    <h1>Health Status Emails</h1>
    <ul>
        {% for email in emails %}
        <li>
            <a href="/email/{{ loop.index0 }}">{{ email.received_time }} - {{ email.subject }}</a>
        </li>
        {% endfor %}
    </ul>
'''

# HTML template to display email content
template_email = '''
    <h1>{{ email.subject }}</h1>
    <p><strong>Received Time:</strong> {{ email.received_time }}</p>
    <hr>
    <div>{{ content | safe }}</div>  <!-- Displaying the formatted email content -->
    <br>
    <a href="/">Back to Emails</a>
'''

def format_email_content(body):
    # Basic checks for content types
    if body:
        # Check for images using <img> tags in HTML
        if "<img" in body:
            return body
        # Check for tables using <table> tags in HTML
        elif "<table" in body:
            return body
        else:
            # Otherwise, treat it as plain text and return with <pre> tags
            return f"<pre>{body}</pre>"

@app.route('/')
def list_emails():
    emails = fetch_health_status_emails()  # Get emails
    return render_template_string(template_list, emails=emails)

@app.route('/email/<int:email_id>')
def show_email(email_id):
    emails = fetch_health_status_emails()  # Get emails again
    email = emails[email_id]  # Fetch specific email
    # Format the email content based on its type
    email_content = format_email_content(email.html_body)  # Using HTML body for formatting
    return render_template_string(template_email, email=email, content=email_content)

if __name__ == '__main__':
    app.run(debug=True)
