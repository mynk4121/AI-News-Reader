### **Half-Line Description:**

The `turnoffOutOfScopeAppFunction` method iterates over a list of app functions, checks if they belong to specific features, and turns them off if they are active.

---

### **Constants, Functions, Policies, and Sessions Used:**

- **Constants:**
  - `OperationConstants.APP_FUNCTION_THRAB`, `OperationConstants.APP_FUNCTION_WEALTH_HISTORICAL_ALLOCATION`, etc. → Various constants representing app functions/features to check.
  - `FeatureToFunction.<FeatureName>.getNewFeatureName()` → Feature constants for specific features (like `NomiKanaUpgrade`, `Widgets`, etc.).
  - `Status.ON`, `Status.OFF` → Represents the status of the app functions (enabled/disabled).

- **Functions:**
  - `opResponse.getAppFunctions()` → Retrieves the list of app functions to check.
  - `flag.getFunction()` → Retrieves the function associated with the app flag.
  - `flag.setStatus(Status.OFF)` → Turns off the app function by setting its status to OFF.
  - `opResponse.setAppFunctions()` → Updates the response with the modified app functions list.

- **Policies:**
  - **Feature Deactivation Policy** → If an app function is identified as out of scope, it is deactivated by turning it off.

- **Session:**
  - **None in this method** as the focus is on modifying the app functions within the response object.

---

### **Small Descriptions for Each Method:**

1. **`opResponse.getAppFunctions()`**
   - Retrieves the list of app functions from the response object to check for specific features.

2. **`flag.getFunction()`**
   - Gets the function name associated with the app flag, used to match it against known feature names.

3. **`flag.setStatus(Status.OFF)`**
   - Sets the status of the app function to OFF, effectively turning it off if it
